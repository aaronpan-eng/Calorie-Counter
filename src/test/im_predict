from ultralytics import YOLO
from calorie_estim import calorieEstimator
import tkinter as tk
from tkinter import filedialog
import os
import cv2

# Selecting imgae from a UI screen
def select_image():
    root = tk.Tk()
    root.withdraw() 

    # Open file
    file_path = filedialog.askopenfilename()
    root.destroy() 

    return file_path

# Saving image from UI screen
def save_image(image):
    root = tk.Tk()
    root.withdraw()

    # Select a location to save the image
    save_path = filedialog.asksaveasfilename(defaultextension=".jpg", filetypes=[("JPEG files", "*.jpg"), ("All files", "*.*")])
    root.destroy() 

    # If a save path is provided, save the image
    if save_path:
        cv2.imwrite(save_path, image)
        print("Image saved successfully.")
    else:
        print("Save operation canceled.")

# Main function to run the image read, predict, save
def main():
    # Model path for trained model
    model_path = os.path.join('..', 'runs', 'detect', 'train8', 'weights', 'best.pt')
    model = YOLO(model_path)
    threshold = 0.5

    # Image paths
    image_path = select_image()
    image = cv2.imread(image_path)

    # Model predictions
    results = model(image)[0]

    for result in results.boxes.data.tolist():
        x1, y1, x2, y2, score, class_id = result

        # Bounding box and label if score over threshold
        if score > threshold:
            cv2.rectangle(image, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 4)
            cv2.putText(image, results.names[int(class_id)].upper(), (int(x1), int(y1 - 10)),
                        cv2.FONT_HERSHEY_SIMPLEX, 1.3, (0, 255, 0), 3, cv2.LINE_AA)

    save_image(image)

# Running main function
if __name__ == "__main__":
    main()